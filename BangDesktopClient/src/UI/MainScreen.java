/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Protocol.Requester;
import Utils.BangDesktop;
import static Utils.BangDesktop.clearLog;
import static Utils.BangDesktop.onMain;
import static Utils.BangDesktop.readLog;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jeremy Joseph Hanniel
 */
public class MainScreen extends javax.swing.JFrame implements TableModelListener {

    Requester requester;
    DefaultTableModel model = new DefaultTableModel();
    DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
    Date date;
    static String username;

    /**
     * Creates new form MainScreen
     */
    public MainScreen(String username) {
        initComponents();
        this.username = username;
        BangDesktop.username = username;
        greetingsLbl.setText("Greetings, " + username + "!");

        File userLog = new File(username + ".txt");
        if (!userLog.exists()) {
            try {
                userLog.createNewFile();
            } catch (IOException ex) {
                ex.getMessage();
            }
        }

        requester = new Requester();
        if (!"".equals(BangDesktop.readLog())) {
            requester.Connect("sync~" + BangDesktop.readLog());
            System.out.println(requester.getResponse());
            if (requester.getResponse().split(":")[1].equals("1")) {
                BangDesktop.clearLog();
            }
        }

        requester.Connect("showtask~" + username);
        //if (requester.isConnected()) {
        Object[] columnNames = {"Name", "Deadline", "Assignees", "Tags", "Category Name", "Status"};
        Object[][] data = new Object[requester.getTasklist().size()][6];

        int i = 0;
        while (i < requester.getTasklist().size()) {
            data[i][0] = requester.getTasklist().get(i).taskName;
            data[i][1] = requester.getTasklist().get(i).deadline;
            data[i][2] = requester.getTasklist().get(i).assignees.toString();
            data[i][3] = requester.getTasklist().get(i).tags.toString();
            data[i][4] = requester.getTasklist().get(i).categName;
            data[i][5] = requester.getTasklist().get(i).status;
            i++;
        }

        model = new DefaultTableModel(data, columnNames);
        taskList.setModel(model);
        taskList.getTableHeader().setReorderingAllowed(false);
        taskList.getModel().addTableModelListener(this);
        BangDesktop.onMain = true;

//        } else {
//            System.out.println("You are disconnected from the internet.");
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        greetingsLbl = new javax.swing.JLabel();
        taskListlbl = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskList = new javax.swing.JTable() {
            @Override
            public Class getColumnClass(int column) {
                if (column == 5) {
                    return Boolean.class;
                } else {
                    return String.class;
                }
            }

            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 5) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        refreshbut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bang Desktop Client");
        setLocationByPlatform(true);

        greetingsLbl.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        greetingsLbl.setText("Greetings!");

        taskListlbl.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        taskListlbl.setText("Here is your task list:");

        logoutBtn.setFont(new java.awt.Font("Corbel", 0, 11)); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutBtnMouseClicked(evt);
            }
        });

        taskList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(taskList);

        refreshbut.setFont(new java.awt.Font("Corbel", 0, 11)); // NOI18N
        refreshbut.setText("Refresh");
        refreshbut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshbutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greetingsLbl)
                    .addComponent(taskListlbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(refreshbut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greetingsLbl)
                    .addComponent(logoutBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskListlbl)
                    .addComponent(refreshbut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutBtnMouseClicked
        // Things to do before logging out

        LoginScreen loginScreen = new LoginScreen();
        loginScreen.pack();
        loginScreen.setVisible(true);
        loginScreen.setLocation(500, 300);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_logoutBtnMouseClicked

    private void refreshbutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshbutMouseClicked
        // TODO add your handling code here:
        requester.Connect("showtask~" + username);
        //if (requester.isConnected()) {
        Object[] columnNames = {"Name", "Deadline", "Assignees", "Tags", "Category Name", "Status"};
        Object[][] data = new Object[requester.getTasklist().size()][6];

        int i = 0;
        while (i < requester.getTasklist().size()) {
            data[i][0] = requester.getTasklist().get(i).taskName;
            data[i][1] = requester.getTasklist().get(i).deadline;
            data[i][2] = requester.getTasklist().get(i).assignees.toString();
            data[i][3] = requester.getTasklist().get(i).tags.toString();
            data[i][4] = requester.getTasklist().get(i).categName;
            data[i][5] = requester.getTasklist().get(i).status;
            i++;
        }

        model = new DefaultTableModel(data, columnNames);
        taskList.setModel(model);
        taskList.getTableHeader().setReorderingAllowed(false);
        taskList.getModel().addTableModelListener(this);
    }//GEN-LAST:event_refreshbutMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel greetingsLbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton refreshbut;
    private javax.swing.JTable taskList;
    private javax.swing.JLabel taskListlbl;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        Object data = model.getValueAt(e.getFirstRow(), e.getColumn());

        String status = null;
        if (data.toString().equals("true")) {
            status = "1";
        } else if (data.toString().equals("false")) {
            status = "0";
        }

        String taskId = requester.getTasklist().get(e.getFirstRow()).taskId;

        date = new Date();
        String timestamp = dateFormat.format(date.getTime());

        requester.Connect("changestatus~" + taskId + "," + status + "," + timestamp);
        System.out.println(requester.isConnected());
        if (!requester.isConnected()) {
            System.out.println("Write to file");
            writeToLog(taskId, status, timestamp);
        }
    }

    private void writeToLog(String taskId, String status, String timestamp) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(username + ".txt", true))) {
            bw.append(taskId + "," + status + "," + timestamp);
            bw.newLine();
            bw.close();
        } catch (IOException ex) {
            ex.getMessage();
        };
    }
}
